#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = __importStar(require("aws-cdk-lib"));
const infra_stack_1 = require("../lib/infra-stack");
const database_stack_1 = require("../lib/database-stack");
const auth_stack_1 = require("../lib/auth-stack");
const storage_stack_1 = require("../lib/storage-stack");
const frontend_stack_1 = require("../lib/frontend-stack");
const processing_stack_1 = require("../lib/processing-stack");
const document_processing_stack_1 = require("../lib/document-processing-stack");
const monitoring_stack_1 = require("../lib/monitoring-stack");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const app = new cdk.App();
// Standard tags for cost allocation
const standardTags = {
    Project: 'AIStudio',
    Owner: 'TSD Engineering',
};
// Get baseDomain from context first
const baseDomain = app.node.tryGetContext('baseDomain');
// Helper to get callback/logout URLs for any environment
function getCallbackAndLogoutUrls(environment, baseDomain) {
    if (environment === 'dev') {
        return {
            callbackUrls: [
                'http://localhost:3000/',
                'http://localhost:3001/',
                'http://localhost:3000/api/auth/callback/cognito',
                'http://localhost:3001/api/auth/callback/cognito',
                baseDomain ? `https://dev.${baseDomain}/` : undefined,
                baseDomain ? `https://dev.${baseDomain}/api/auth/callback/cognito` : undefined,
            ].filter(Boolean),
            logoutUrls: [
                'http://localhost:3000/',
                'http://localhost:3001/',
                'http://localhost:3000/oauth2/idpresponse',
                'http://localhost:3001/oauth2/idpresponse',
                baseDomain ? `https://dev.${baseDomain}/` : undefined,
                baseDomain ? `https://dev.${baseDomain}/oauth2/idpresponse` : undefined,
            ].filter(Boolean),
        };
    }
    else {
        return {
            callbackUrls: [
                baseDomain ? `https://prod.${baseDomain}/` : undefined,
                baseDomain ? `https://dev.${baseDomain}/` : undefined,
                baseDomain ? `https://prod.${baseDomain}/api/auth/callback/cognito` : undefined,
                baseDomain ? `https://dev.${baseDomain}/api/auth/callback/cognito` : undefined,
            ].filter(Boolean),
            logoutUrls: [
                baseDomain ? `https://prod.${baseDomain}/` : undefined,
                baseDomain ? `https://dev.${baseDomain}/` : undefined,
                baseDomain ? `https://prod.${baseDomain}/oauth2/idpresponse` : undefined,
                baseDomain ? `https://dev.${baseDomain}/oauth2/idpresponse` : undefined,
            ].filter(Boolean),
        };
    }
}
// Dev environment
const devDbStack = new database_stack_1.DatabaseStack(app, 'AIStudio-DatabaseStack-Dev', {
    environment: 'dev',
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(devDbStack).add('Environment', 'Dev');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devDbStack).add(key, value));
const devUrls = getCallbackAndLogoutUrls('dev', baseDomain);
const devAuthStack = new auth_stack_1.AuthStack(app, 'AIStudio-AuthStack-Dev', {
    environment: 'dev',
    googleClientSecret: aws_cdk_lib_1.SecretValue.secretsManager('aistudio-dev-google-oauth', { jsonField: 'clientSecret' }),
    callbackUrls: devUrls.callbackUrls,
    logoutUrls: devUrls.logoutUrls,
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(devAuthStack).add('Environment', 'Dev');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devAuthStack).add(key, value));
const devStorageStack = new storage_stack_1.StorageStack(app, 'AIStudio-StorageStack-Dev', {
    environment: 'dev',
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(devStorageStack).add('Environment', 'Dev');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devStorageStack).add(key, value));
const devProcessingStack = new processing_stack_1.ProcessingStack(app, 'AIStudio-ProcessingStack-Dev', {
    environment: 'dev',
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(devProcessingStack).add('Environment', 'Dev');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devProcessingStack).add(key, value));
const devDocumentProcessingStack = new document_processing_stack_1.DocumentProcessingStack(app, 'AIStudio-DocumentProcessingStack-Dev', {
    environment: 'dev',
    rdsClusterArn: devDbStack.databaseResourceArn,
    rdsSecretArn: devDbStack.databaseSecretArn,
    documentsBucketName: devStorageStack.documentsBucketName,
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
devDocumentProcessingStack.addDependency(devDbStack);
devDocumentProcessingStack.addDependency(devStorageStack);
cdk.Tags.of(devDocumentProcessingStack).add('Environment', 'Dev');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devDocumentProcessingStack).add(key, value));
// Prod environment
const prodDbStack = new database_stack_1.DatabaseStack(app, 'AIStudio-DatabaseStack-Prod', {
    environment: 'prod',
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(prodDbStack).add('Environment', 'Prod');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodDbStack).add(key, value));
const prodUrls = getCallbackAndLogoutUrls('prod', baseDomain);
const prodAuthStack = new auth_stack_1.AuthStack(app, 'AIStudio-AuthStack-Prod', {
    environment: 'prod',
    googleClientSecret: aws_cdk_lib_1.SecretValue.secretsManager('aistudio-prod-google-oauth', { jsonField: 'clientSecret' }),
    callbackUrls: prodUrls.callbackUrls,
    logoutUrls: prodUrls.logoutUrls,
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(prodAuthStack).add('Environment', 'Prod');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodAuthStack).add(key, value));
const prodStorageStack = new storage_stack_1.StorageStack(app, 'AIStudio-StorageStack-Prod', {
    environment: 'prod',
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(prodStorageStack).add('Environment', 'Prod');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodStorageStack).add(key, value));
const prodProcessingStack = new processing_stack_1.ProcessingStack(app, 'AIStudio-ProcessingStack-Prod', {
    environment: 'prod',
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(prodProcessingStack).add('Environment', 'Prod');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodProcessingStack).add(key, value));
const prodDocumentProcessingStack = new document_processing_stack_1.DocumentProcessingStack(app, 'AIStudio-DocumentProcessingStack-Prod', {
    environment: 'prod',
    rdsClusterArn: prodDbStack.databaseResourceArn,
    rdsSecretArn: prodDbStack.databaseSecretArn,
    documentsBucketName: prodStorageStack.documentsBucketName,
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
prodDocumentProcessingStack.addDependency(prodDbStack);
prodDocumentProcessingStack.addDependency(prodStorageStack);
cdk.Tags.of(prodDocumentProcessingStack).add('Environment', 'Prod');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodDocumentProcessingStack).add(key, value));
// Frontend stacks - created after all other stacks
if (baseDomain) {
    const devFrontendStack = new frontend_stack_1.FrontendStack(app, 'AIStudio-FrontendStack-Dev', {
        environment: 'dev',
        githubToken: aws_cdk_lib_1.SecretValue.secretsManager('aistudio-github-token'),
        baseDomain,
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
    });
    cdk.Tags.of(devFrontendStack).add('Environment', 'Dev');
    Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devFrontendStack).add(key, value));
    const prodFrontendStack = new frontend_stack_1.FrontendStack(app, 'AIStudio-FrontendStack-Prod', {
        environment: 'prod',
        githubToken: aws_cdk_lib_1.SecretValue.secretsManager('aistudio-github-token'),
        baseDomain,
        env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
    });
    cdk.Tags.of(prodFrontendStack).add('Environment', 'Prod');
    Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodFrontendStack).add(key, value));
    // To deploy, use:
    // cdk deploy AIStudio-FrontendStack-Dev --context baseDomain=yourdomain.com
    // cdk deploy AIStudio-FrontendStack-Prod --context baseDomain=yourdomain.com
}
// Monitoring stacks - created after all other stacks for comprehensive monitoring
// Optional: pass alertEmail context to enable email notifications
const alertEmail = app.node.tryGetContext('alertEmail');
const devMonitoringStack = new monitoring_stack_1.MonitoringStack(app, 'AIStudio-MonitoringStack-Dev', {
    environment: 'dev',
    alertEmail,
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(devMonitoringStack).add('Environment', 'Dev');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(devMonitoringStack).add(key, value));
const prodMonitoringStack = new monitoring_stack_1.MonitoringStack(app, 'AIStudio-MonitoringStack-Prod', {
    environment: 'prod',
    alertEmail,
    env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});
cdk.Tags.of(prodMonitoringStack).add('Environment', 'Prod');
Object.entries(standardTags).forEach(([key, value]) => cdk.Tags.of(prodMonitoringStack).add(key, value));
// To deploy monitoring with email alerts:
// cdk deploy AIStudio-MonitoringStack-Dev --context alertEmail=your-email@example.com
// cdk deploy AIStudio-MonitoringStack-Prod --context alertEmail=your-email@example.com
new infra_stack_1.InfraStack(app, 'AIStudio-InfraStack', {
/* If you don't specify 'env', this stack will be environment-agnostic.
 * Account/Region-dependent features and context lookups will not work,
 * but a single synthesized template can be deployed anywhere. */
/* Uncomment the next line to specialize this stack for the AWS Account
 * and Region that are implied by the current CLI configuration. */
// env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
/* Uncomment the next line if you know exactly what Account and Region you
 * want to deploy the stack to. */
// env: { account: '123456789012', region: 'us-east-1' },
/* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */
});
//# sourceMappingURL=data:application/json;base64,