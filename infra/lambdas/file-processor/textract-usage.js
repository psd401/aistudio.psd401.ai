"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextractUsageTracker = void 0;
const client_rds_data_1 = require("@aws-sdk/client-rds-data");
const rdsClient = new client_rds_data_1.RDSDataClient({});
class TextractUsageTracker {
    dbArn;
    secretArn;
    dbName;
    monthlyLimit = 1000; // Free tier limit
    constructor(dbArn, secretArn, dbName = 'aistudio') {
        this.dbArn = dbArn;
        this.secretArn = secretArn;
        this.dbName = dbName;
    }
    async canProcessPages(pageCount) {
        const currentUsage = await this.getMonthlyUsage();
        return (currentUsage + pageCount) <= this.monthlyLimit;
    }
    async recordUsage(pageCount) {
        const sql = `
      INSERT INTO textract_usage (month, page_count, created_at)
      VALUES (DATE_TRUNC('month', CURRENT_DATE), :pageCount, CURRENT_TIMESTAMP)
      ON CONFLICT (month) 
      DO UPDATE SET 
        page_count = textract_usage.page_count + :pageCount,
        updated_at = CURRENT_TIMESTAMP
    `;
        await rdsClient.send(new client_rds_data_1.ExecuteStatementCommand({
            resourceArn: this.dbArn,
            secretArn: this.secretArn,
            database: this.dbName,
            sql,
            parameters: [
                { name: 'pageCount', value: { longValue: pageCount } }
            ]
        }));
    }
    async getMonthlyUsage() {
        const sql = `
      SELECT COALESCE(page_count, 0) as usage
      FROM textract_usage
      WHERE month = DATE_TRUNC('month', CURRENT_DATE)
    `;
        const result = await rdsClient.send(new client_rds_data_1.ExecuteStatementCommand({
            resourceArn: this.dbArn,
            secretArn: this.secretArn,
            database: this.dbName,
            sql
        }));
        if (result.records && result.records.length > 0) {
            return result.records[0][0]?.longValue || 0;
        }
        return 0;
    }
    async getRemainingPages() {
        const usage = await this.getMonthlyUsage();
        return Math.max(0, this.monthlyLimit - usage);
    }
}
exports.TextractUsageTracker = TextractUsageTracker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dHJhY3QtdXNhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXh0cmFjdC11c2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4REFBa0Y7QUFFbEYsTUFBTSxTQUFTLEdBQUcsSUFBSSwrQkFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBUXhDLE1BQWEsb0JBQW9CO0lBQ2QsS0FBSyxDQUFTO0lBQ2QsU0FBUyxDQUFTO0lBQ2xCLE1BQU0sQ0FBUztJQUNmLFlBQVksR0FBVyxJQUFJLENBQUMsQ0FBQyxrQkFBa0I7SUFFaEUsWUFBWSxLQUFhLEVBQUUsU0FBaUIsRUFBRSxTQUFpQixVQUFVO1FBQ3ZFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQUMsZUFBZSxDQUFDLFNBQWlCO1FBQ3JDLE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztJQUN6RCxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFpQjtRQUNqQyxNQUFNLEdBQUcsR0FBRzs7Ozs7OztLQU9YLENBQUM7UUFFRixNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQ2xCLElBQUkseUNBQXVCLENBQUM7WUFDMUIsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDckIsR0FBRztZQUNILFVBQVUsRUFBRTtnQkFDVixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFO2FBQ3ZEO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWU7UUFDbkIsTUFBTSxHQUFHLEdBQUc7Ozs7S0FJWCxDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUNqQyxJQUFJLHlDQUF1QixDQUFDO1lBQzFCLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSztZQUN2QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ3JCLEdBQUc7U0FDSixDQUFDLENBQ0gsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNoRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxJQUFJLENBQUMsQ0FBQztRQUM5QyxDQUFDO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQjtRQUNyQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUMzQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNGO0FBbkVELG9EQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJEU0RhdGFDbGllbnQsIEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXJkcy1kYXRhJztcblxuY29uc3QgcmRzQ2xpZW50ID0gbmV3IFJEU0RhdGFDbGllbnQoe30pO1xuXG5pbnRlcmZhY2UgVXNhZ2VUcmFja2VyIHtcbiAgY2FuUHJvY2Vzc1BhZ2VzKHBhZ2VDb3VudDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPjtcbiAgcmVjb3JkVXNhZ2UocGFnZUNvdW50OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuICBnZXRNb250aGx5VXNhZ2UoKTogUHJvbWlzZTxudW1iZXI+O1xufVxuXG5leHBvcnQgY2xhc3MgVGV4dHJhY3RVc2FnZVRyYWNrZXIgaW1wbGVtZW50cyBVc2FnZVRyYWNrZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGRiQXJuOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0QXJuOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGJOYW1lOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgbW9udGhseUxpbWl0OiBudW1iZXIgPSAxMDAwOyAvLyBGcmVlIHRpZXIgbGltaXRcbiAgXG4gIGNvbnN0cnVjdG9yKGRiQXJuOiBzdHJpbmcsIHNlY3JldEFybjogc3RyaW5nLCBkYk5hbWU6IHN0cmluZyA9ICdhaXN0dWRpbycpIHtcbiAgICB0aGlzLmRiQXJuID0gZGJBcm47XG4gICAgdGhpcy5zZWNyZXRBcm4gPSBzZWNyZXRBcm47XG4gICAgdGhpcy5kYk5hbWUgPSBkYk5hbWU7XG4gIH1cbiAgXG4gIGFzeW5jIGNhblByb2Nlc3NQYWdlcyhwYWdlQ291bnQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGN1cnJlbnRVc2FnZSA9IGF3YWl0IHRoaXMuZ2V0TW9udGhseVVzYWdlKCk7XG4gICAgcmV0dXJuIChjdXJyZW50VXNhZ2UgKyBwYWdlQ291bnQpIDw9IHRoaXMubW9udGhseUxpbWl0O1xuICB9XG4gIFxuICBhc3luYyByZWNvcmRVc2FnZShwYWdlQ291bnQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNxbCA9IGBcbiAgICAgIElOU0VSVCBJTlRPIHRleHRyYWN0X3VzYWdlIChtb250aCwgcGFnZV9jb3VudCwgY3JlYXRlZF9hdClcbiAgICAgIFZBTFVFUyAoREFURV9UUlVOQygnbW9udGgnLCBDVVJSRU5UX0RBVEUpLCA6cGFnZUNvdW50LCBDVVJSRU5UX1RJTUVTVEFNUClcbiAgICAgIE9OIENPTkZMSUNUIChtb250aCkgXG4gICAgICBETyBVUERBVEUgU0VUIFxuICAgICAgICBwYWdlX2NvdW50ID0gdGV4dHJhY3RfdXNhZ2UucGFnZV9jb3VudCArIDpwYWdlQ291bnQsXG4gICAgICAgIHVwZGF0ZWRfYXQgPSBDVVJSRU5UX1RJTUVTVEFNUFxuICAgIGA7XG4gICAgXG4gICAgYXdhaXQgcmRzQ2xpZW50LnNlbmQoXG4gICAgICBuZXcgRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQoe1xuICAgICAgICByZXNvdXJjZUFybjogdGhpcy5kYkFybixcbiAgICAgICAgc2VjcmV0QXJuOiB0aGlzLnNlY3JldEFybixcbiAgICAgICAgZGF0YWJhc2U6IHRoaXMuZGJOYW1lLFxuICAgICAgICBzcWwsXG4gICAgICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgICAgICB7IG5hbWU6ICdwYWdlQ291bnQnLCB2YWx1ZTogeyBsb25nVmFsdWU6IHBhZ2VDb3VudCB9IH1cbiAgICAgICAgXVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIFxuICBhc3luYyBnZXRNb250aGx5VXNhZ2UoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBzcWwgPSBgXG4gICAgICBTRUxFQ1QgQ09BTEVTQ0UocGFnZV9jb3VudCwgMCkgYXMgdXNhZ2VcbiAgICAgIEZST00gdGV4dHJhY3RfdXNhZ2VcbiAgICAgIFdIRVJFIG1vbnRoID0gREFURV9UUlVOQygnbW9udGgnLCBDVVJSRU5UX0RBVEUpXG4gICAgYDtcbiAgICBcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZHNDbGllbnQuc2VuZChcbiAgICAgIG5ldyBFeGVjdXRlU3RhdGVtZW50Q29tbWFuZCh7XG4gICAgICAgIHJlc291cmNlQXJuOiB0aGlzLmRiQXJuLFxuICAgICAgICBzZWNyZXRBcm46IHRoaXMuc2VjcmV0QXJuLFxuICAgICAgICBkYXRhYmFzZTogdGhpcy5kYk5hbWUsXG4gICAgICAgIHNxbFxuICAgICAgfSlcbiAgICApO1xuICAgIFxuICAgIGlmIChyZXN1bHQucmVjb3JkcyAmJiByZXN1bHQucmVjb3Jkcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LnJlY29yZHNbMF1bMF0/LmxvbmdWYWx1ZSB8fCAwO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gMDtcbiAgfVxuICBcbiAgYXN5bmMgZ2V0UmVtYWluaW5nUGFnZXMoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCB1c2FnZSA9IGF3YWl0IHRoaXMuZ2V0TW9udGhseVVzYWdlKCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMubW9udGhseUxpbWl0IC0gdXNhZ2UpO1xuICB9XG59Il19